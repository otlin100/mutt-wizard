#!/bin/bash
# Sync mail and give notification if there is new mail.

export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
export DBUS_SESSION_BUS_ADDRESS
export DISPLAY=:0.0

[ -d "$XDG_DATA_HOME/gopass" ] && export PASSWORD_STORE_DIR="$XDG_DATA_HOME/gopass"

mbsync_config="$XDG_CONFIG_HOME/mbsync/config"
logfile="$XDG_CONFIG_HOME"/mutt/.mbsync.log
logfile_old="$logfile"_old

lognotify() {
    echo "$@"
    notify-send "$@"
}

lognotify_exit() {
    lognotify "$@"
    exit 1
}

# Run only if not already running in other instance
pgrep -x mbsync >/dev/null && lognotify_exit "mbsync is already running."

[ -z "$logfile_old" ] && rm "$logfile_old"
cp -f "$logfile" "$logfile_old"
date >"$logfile"

command -v notify-send >/dev/null || echo "Note that \`libnotify\` or \`libnotify-send\` should be installed for pop-up mail notifications with this script." &

command -v mbsync >/dev/null || lognotify_exit "Please install isync to sync your mail!"

[ -f "$mbsync_config" ] || lognotify_exit "Please configure mbsync in ""$mbsync_config"" to sync yout mail!"

# Run only if user logged in (prevent cron errors)
pgrep -u "${USER:=$LOGNAME}" >/dev/null || { echo "$USER not logged in; sync will not run."; exit ;}

# Checks for internet connection and set notification script.
# ping -q -c 1 1.1.1.1 > /dev/null || { lognotify "No internet connection detected."; exit ;}

echo "GPG Authentication..."
gopass show "$(gopass ls -f | head -n 1)" >/dev/null 2>&1 || lognotify_exit "Authentification failed"
wait

notify() { lognotify "mutt-wizard" "ðŸ“¬ $2 new mail(s) in \`$1\` account." ;}

# Check account for new mail. Notify if there is new content.
syncandnotify() {
    acc="$(echo "$account" | sed "s/.*\///")"
    lognotify "syncing '$acc'"
    set -o pipefail; (time mbsync -c "$mbsync_config" -V "$acc") 2>&1 | sed "s/^/$acc: /" >> "$logfile" || notify-send "Something went wrong syncing '$account' with mbsync. Please check the logs in ""$logfile"" for further information"

    new=$(find "$XDG_DATA_HOME/mail/$acc/INBOX/new/" "$XDG_DATA_HOME/mail/$acc/Inbox/new/" "$XDG_DATA_HOME/mail/$acc/inbox/new/" -type f -newer "$XDG_CONFIG_HOME/mutt/.mailsynclastrun" 2> /dev/null)

    newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
    if [ "$newcount" -gt "0" ]; then
        notify "$acc" "$newcount" &
        for file in $new; do
            # Extract subject and sender from mail.
            from=$(awk '/^From: / && ++n ==1,/^\<.*\>:/' "$file" | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | awk '{ $1=""; if (NF>=3)$NF=""; print $0 }' | sed 's/^[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//')
            subject=$(awk '/^Subject: / && ++n == 1,/^\<.*\>: / && ++i == 2' "$file" | head -n-1 | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | sed 's/^Subject: //' | sed 's/^{[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//' | tr -d '\n')
            lognotify "ðŸ“§ $from:" "$subject" &
        done
    fi
}

# Sync accounts passed as argument or all.
if [ "$#" -eq "0" ]; then
    accounts="$(awk '/^Channel/ {print $2}' "$mbsync_config")"
else
    accounts=$*
fi

echo " ðŸ”ƒ" > /tmp/imapsyncicon_"$USER"
pkill -RTMIN+12 i3blocks >/dev/null 2>&1

# Parallelize multiple accounts
for account in $accounts
do
    syncandnotify &
done

wait
rm -f /tmp/imapsyncicon_"$USER"
wait
pkill -RTMIN+12 i3blocks >/dev/null 2>&1
lognotify "âœ” Finished syncing!"

notmuch new 2>/dev/null

#Create a touch file that indicates the time of the last run of mailsync
touch "$XDG_CONFIG_HOME/mutt/.mailsynclastrun"
